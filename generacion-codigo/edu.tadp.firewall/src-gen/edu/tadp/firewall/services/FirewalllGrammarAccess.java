/*
* generated by Xtext
*/

package edu.tadp.firewall.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FirewalllGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FirewallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Firewall");
		private final Assignment cReglasAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReglasReglaEtiquetadaParserRuleCall_0 = (RuleCall)cReglasAssignment.eContents().get(0);
		
		//Firewall:
		//	reglas+=ReglaEtiquetada*;
		public ParserRule getRule() { return rule; }

		//reglas+=ReglaEtiquetada*
		public Assignment getReglasAssignment() { return cReglasAssignment; }

		//ReglaEtiquetada
		public RuleCall getReglasReglaEtiquetadaParserRuleCall_0() { return cReglasReglaEtiquetadaParserRuleCall_0; }
	}

	public class ReglaEtiquetadaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReglaEtiquetada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLanAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLanIDTerminalRuleCall_0_0_0 = (RuleCall)cLanAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cReglaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReglaReglaParserRuleCall_1_0 = (RuleCall)cReglaAssignment_1.eContents().get(0);
		
		//ReglaEtiquetada:
		//	(lan=ID ":")? regla=Regla;
		public ParserRule getRule() { return rule; }

		//(lan=ID ":")? regla=Regla
		public Group getGroup() { return cGroup; }

		//(lan=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//lan=ID
		public Assignment getLanAssignment_0_0() { return cLanAssignment_0_0; }

		//ID
		public RuleCall getLanIDTerminalRuleCall_0_0_0() { return cLanIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//regla=Regla
		public Assignment getReglaAssignment_1() { return cReglaAssignment_1; }

		//Regla
		public RuleCall getReglaReglaParserRuleCall_1_0() { return cReglaReglaParserRuleCall_1_0; }
	}

	public class ReglaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Regla");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondicionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondicionCondicionParserRuleCall_1_0 = (RuleCall)cCondicionAssignment_1.eContents().get(0);
		private final Keyword cHayQueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAccionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAccionAccionParserRuleCall_3_0 = (RuleCall)cAccionAssignment_3.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Regla:
		//	"Si " condicion=Condicion " hay que " accion=Accion "!";
		public ParserRule getRule() { return rule; }

		//"Si " condicion=Condicion " hay que " accion=Accion "!"
		public Group getGroup() { return cGroup; }

		//"Si "
		public Keyword getSiKeyword_0() { return cSiKeyword_0; }

		//condicion=Condicion
		public Assignment getCondicionAssignment_1() { return cCondicionAssignment_1; }

		//Condicion
		public RuleCall getCondicionCondicionParserRuleCall_1_0() { return cCondicionCondicionParserRuleCall_1_0; }

		//" hay que "
		public Keyword getHayQueKeyword_2() { return cHayQueKeyword_2; }

		//accion=Accion
		public Assignment getAccionAssignment_3() { return cAccionAssignment_3; }

		//Accion
		public RuleCall getAccionAccionParserRuleCall_3_0() { return cAccionAccionParserRuleCall_3_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }
	}

	public class AccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Accion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAceptarAccionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBloquearAccionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForwardearAccionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Accion:
		//	AceptarAccion | BloquearAccion | ForwardearAccion;
		public ParserRule getRule() { return rule; }

		//AceptarAccion | BloquearAccion | ForwardearAccion
		public Alternatives getAlternatives() { return cAlternatives; }

		//AceptarAccion
		public RuleCall getAceptarAccionParserRuleCall_0() { return cAceptarAccionParserRuleCall_0; }

		//BloquearAccion
		public RuleCall getBloquearAccionParserRuleCall_1() { return cBloquearAccionParserRuleCall_1; }

		//ForwardearAccion
		public RuleCall getForwardearAccionParserRuleCall_2() { return cForwardearAccionParserRuleCall_2; }
	}

	public class ForwardearAccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForwardearAccion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardearAccionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardearAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIpIPParserRuleCall_2_0 = (RuleCall)cIpAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPuertoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPuertoINTTerminalRuleCall_4_0 = (RuleCall)cPuertoAssignment_4.eContents().get(0);
		
		//ForwardearAccion:
		//	{ForwardearAccion} "forwardear a " ip=IP ":" puerto=INT;
		public ParserRule getRule() { return rule; }

		//{ForwardearAccion} "forwardear a " ip=IP ":" puerto=INT
		public Group getGroup() { return cGroup; }

		//{ForwardearAccion}
		public Action getForwardearAccionAction_0() { return cForwardearAccionAction_0; }

		//"forwardear a "
		public Keyword getForwardearAKeyword_1() { return cForwardearAKeyword_1; }

		//ip=IP
		public Assignment getIpAssignment_2() { return cIpAssignment_2; }

		//IP
		public RuleCall getIpIPParserRuleCall_2_0() { return cIpIPParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//puerto=INT
		public Assignment getPuertoAssignment_4() { return cPuertoAssignment_4; }

		//INT
		public RuleCall getPuertoINTTerminalRuleCall_4_0() { return cPuertoINTTerminalRuleCall_4_0; }
	}

	public class AceptarAccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AceptarAccion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAceptarAccionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAceptarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AceptarAccion:
		//	{AceptarAccion} "aceptar";
		public ParserRule getRule() { return rule; }

		//{AceptarAccion} "aceptar"
		public Group getGroup() { return cGroup; }

		//{AceptarAccion}
		public Action getAceptarAccionAction_0() { return cAceptarAccionAction_0; }

		//"aceptar"
		public Keyword getAceptarKeyword_1() { return cAceptarKeyword_1; }
	}

	public class BloquearAccionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BloquearAccion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBloquearAccionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBloquearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BloquearAccion:
		//	{BloquearAccion} "bloquear";
		public ParserRule getRule() { return rule; }

		//{BloquearAccion} "bloquear"
		public Group getGroup() { return cGroup; }

		//{BloquearAccion}
		public Action getBloquearAccionAction_0() { return cBloquearAccionAction_0; }

		//"bloquear"
		public Keyword getBloquearKeyword_1() { return cBloquearKeyword_1; }
	}

	public class CondicionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condicion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCondicionPuertoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCondicionIPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condicion:
		//	CondicionPuerto | CondicionIP;
		public ParserRule getRule() { return rule; }

		//CondicionPuerto | CondicionIP
		public Alternatives getAlternatives() { return cAlternatives; }

		//CondicionPuerto
		public RuleCall getCondicionPuertoParserRuleCall_0() { return cCondicionPuertoParserRuleCall_0; }

		//CondicionIP
		public RuleCall getCondicionIPParserRuleCall_1() { return cCondicionIPParserRuleCall_1; }
	}

	public class CondicionPuertoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CondicionPuerto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElPuertoEsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPuertoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPuertoINTTerminalRuleCall_1_0 = (RuleCall)cPuertoAssignment_1.eContents().get(0);
		
		//CondicionPuerto:
		//	"el puerto es" puerto=INT;
		public ParserRule getRule() { return rule; }

		//"el puerto es" puerto=INT
		public Group getGroup() { return cGroup; }

		//"el puerto es"
		public Keyword getElPuertoEsKeyword_0() { return cElPuertoEsKeyword_0; }

		//puerto=INT
		public Assignment getPuertoAssignment_1() { return cPuertoAssignment_1; }

		//INT
		public RuleCall getPuertoINTTerminalRuleCall_1_0() { return cPuertoINTTerminalRuleCall_1_0; }
	}

	public class CondicionIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CondicionIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLaIpEsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIpIPParserRuleCall_1_0 = (RuleCall)cIpAssignment_1.eContents().get(0);
		
		//CondicionIP:
		//	"la ip es" ip=IP;
		public ParserRule getRule() { return rule; }

		//"la ip es" ip=IP
		public Group getGroup() { return cGroup; }

		//"la ip es"
		public Keyword getLaIpEsKeyword_0() { return cLaIpEsKeyword_0; }

		//ip=IP
		public Assignment getIpAssignment_1() { return cIpAssignment_1; }

		//IP
		public RuleCall getIpIPParserRuleCall_1_0() { return cIpIPParserRuleCall_1_0; }
	}

	public class IPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimeroAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimeroINTTerminalRuleCall_0_0 = (RuleCall)cPrimeroAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSegundoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSegundoINTTerminalRuleCall_2_0 = (RuleCall)cSegundoAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTerceroAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTerceroINTTerminalRuleCall_4_0 = (RuleCall)cTerceroAssignment_4.eContents().get(0);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCuartoAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCuartoINTTerminalRuleCall_6_0 = (RuleCall)cCuartoAssignment_6.eContents().get(0);
		
		//IP:
		//	primero=INT "." segundo=INT "." tercero=INT "." cuarto=INT;
		public ParserRule getRule() { return rule; }

		//primero=INT "." segundo=INT "." tercero=INT "." cuarto=INT
		public Group getGroup() { return cGroup; }

		//primero=INT
		public Assignment getPrimeroAssignment_0() { return cPrimeroAssignment_0; }

		//INT
		public RuleCall getPrimeroINTTerminalRuleCall_0_0() { return cPrimeroINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//segundo=INT
		public Assignment getSegundoAssignment_2() { return cSegundoAssignment_2; }

		//INT
		public RuleCall getSegundoINTTerminalRuleCall_2_0() { return cSegundoINTTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//tercero=INT
		public Assignment getTerceroAssignment_4() { return cTerceroAssignment_4; }

		//INT
		public RuleCall getTerceroINTTerminalRuleCall_4_0() { return cTerceroINTTerminalRuleCall_4_0; }

		//"."
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }

		//cuarto=INT
		public Assignment getCuartoAssignment_6() { return cCuartoAssignment_6; }

		//INT
		public RuleCall getCuartoINTTerminalRuleCall_6_0() { return cCuartoINTTerminalRuleCall_6_0; }
	}
	
	
	private FirewallElements pFirewall;
	private ReglaEtiquetadaElements pReglaEtiquetada;
	private ReglaElements pRegla;
	private AccionElements pAccion;
	private ForwardearAccionElements pForwardearAccion;
	private AceptarAccionElements pAceptarAccion;
	private BloquearAccionElements pBloquearAccion;
	private CondicionElements pCondicion;
	private CondicionPuertoElements pCondicionPuerto;
	private CondicionIPElements pCondicionIP;
	private IPElements pIP;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FirewalllGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.tadp.firewall.Firewalll".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Firewall:
	//	reglas+=ReglaEtiquetada*;
	public FirewallElements getFirewallAccess() {
		return (pFirewall != null) ? pFirewall : (pFirewall = new FirewallElements());
	}
	
	public ParserRule getFirewallRule() {
		return getFirewallAccess().getRule();
	}

	//ReglaEtiquetada:
	//	(lan=ID ":")? regla=Regla;
	public ReglaEtiquetadaElements getReglaEtiquetadaAccess() {
		return (pReglaEtiquetada != null) ? pReglaEtiquetada : (pReglaEtiquetada = new ReglaEtiquetadaElements());
	}
	
	public ParserRule getReglaEtiquetadaRule() {
		return getReglaEtiquetadaAccess().getRule();
	}

	//Regla:
	//	"Si " condicion=Condicion " hay que " accion=Accion "!";
	public ReglaElements getReglaAccess() {
		return (pRegla != null) ? pRegla : (pRegla = new ReglaElements());
	}
	
	public ParserRule getReglaRule() {
		return getReglaAccess().getRule();
	}

	//Accion:
	//	AceptarAccion | BloquearAccion | ForwardearAccion;
	public AccionElements getAccionAccess() {
		return (pAccion != null) ? pAccion : (pAccion = new AccionElements());
	}
	
	public ParserRule getAccionRule() {
		return getAccionAccess().getRule();
	}

	//ForwardearAccion:
	//	{ForwardearAccion} "forwardear a " ip=IP ":" puerto=INT;
	public ForwardearAccionElements getForwardearAccionAccess() {
		return (pForwardearAccion != null) ? pForwardearAccion : (pForwardearAccion = new ForwardearAccionElements());
	}
	
	public ParserRule getForwardearAccionRule() {
		return getForwardearAccionAccess().getRule();
	}

	//AceptarAccion:
	//	{AceptarAccion} "aceptar";
	public AceptarAccionElements getAceptarAccionAccess() {
		return (pAceptarAccion != null) ? pAceptarAccion : (pAceptarAccion = new AceptarAccionElements());
	}
	
	public ParserRule getAceptarAccionRule() {
		return getAceptarAccionAccess().getRule();
	}

	//BloquearAccion:
	//	{BloquearAccion} "bloquear";
	public BloquearAccionElements getBloquearAccionAccess() {
		return (pBloquearAccion != null) ? pBloquearAccion : (pBloquearAccion = new BloquearAccionElements());
	}
	
	public ParserRule getBloquearAccionRule() {
		return getBloquearAccionAccess().getRule();
	}

	//Condicion:
	//	CondicionPuerto | CondicionIP;
	public CondicionElements getCondicionAccess() {
		return (pCondicion != null) ? pCondicion : (pCondicion = new CondicionElements());
	}
	
	public ParserRule getCondicionRule() {
		return getCondicionAccess().getRule();
	}

	//CondicionPuerto:
	//	"el puerto es" puerto=INT;
	public CondicionPuertoElements getCondicionPuertoAccess() {
		return (pCondicionPuerto != null) ? pCondicionPuerto : (pCondicionPuerto = new CondicionPuertoElements());
	}
	
	public ParserRule getCondicionPuertoRule() {
		return getCondicionPuertoAccess().getRule();
	}

	//CondicionIP:
	//	"la ip es" ip=IP;
	public CondicionIPElements getCondicionIPAccess() {
		return (pCondicionIP != null) ? pCondicionIP : (pCondicionIP = new CondicionIPElements());
	}
	
	public ParserRule getCondicionIPRule() {
		return getCondicionIPAccess().getRule();
	}

	//IP:
	//	primero=INT "." segundo=INT "." tercero=INT "." cuarto=INT;
	public IPElements getIPAccess() {
		return (pIP != null) ? pIP : (pIP = new IPElements());
	}
	
	public ParserRule getIPRule() {
		return getIPAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
