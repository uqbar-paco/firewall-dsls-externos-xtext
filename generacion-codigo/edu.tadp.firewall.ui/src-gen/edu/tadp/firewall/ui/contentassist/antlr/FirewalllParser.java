/*
* generated by Xtext
*/
package edu.tadp.firewall.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.tadp.firewall.services.FirewalllGrammarAccess;

public class FirewalllParser extends AbstractContentAssistParser {
	
	@Inject
	private FirewalllGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.tadp.firewall.ui.contentassist.antlr.internal.InternalFirewalllParser createParser() {
		edu.tadp.firewall.ui.contentassist.antlr.internal.InternalFirewalllParser result = new edu.tadp.firewall.ui.contentassist.antlr.internal.InternalFirewalllParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAccionAccess().getAlternatives(), "rule__Accion__Alternatives");
					put(grammarAccess.getCondicionAccess().getAlternatives(), "rule__Condicion__Alternatives");
					put(grammarAccess.getReglaEtiquetadaAccess().getGroup(), "rule__ReglaEtiquetada__Group__0");
					put(grammarAccess.getReglaEtiquetadaAccess().getGroup_0(), "rule__ReglaEtiquetada__Group_0__0");
					put(grammarAccess.getReglaAccess().getGroup(), "rule__Regla__Group__0");
					put(grammarAccess.getForwardearAccionAccess().getGroup(), "rule__ForwardearAccion__Group__0");
					put(grammarAccess.getAceptarAccionAccess().getGroup(), "rule__AceptarAccion__Group__0");
					put(grammarAccess.getBloquearAccionAccess().getGroup(), "rule__BloquearAccion__Group__0");
					put(grammarAccess.getCondicionPuertoAccess().getGroup(), "rule__CondicionPuerto__Group__0");
					put(grammarAccess.getCondicionIPAccess().getGroup(), "rule__CondicionIP__Group__0");
					put(grammarAccess.getIPAccess().getGroup(), "rule__IP__Group__0");
					put(grammarAccess.getFirewallAccess().getReglasAssignment(), "rule__Firewall__ReglasAssignment");
					put(grammarAccess.getReglaEtiquetadaAccess().getLanAssignment_0_0(), "rule__ReglaEtiquetada__LanAssignment_0_0");
					put(grammarAccess.getReglaEtiquetadaAccess().getReglaAssignment_1(), "rule__ReglaEtiquetada__ReglaAssignment_1");
					put(grammarAccess.getReglaAccess().getCondicionAssignment_1(), "rule__Regla__CondicionAssignment_1");
					put(grammarAccess.getReglaAccess().getAccionAssignment_3(), "rule__Regla__AccionAssignment_3");
					put(grammarAccess.getForwardearAccionAccess().getIpAssignment_2(), "rule__ForwardearAccion__IpAssignment_2");
					put(grammarAccess.getForwardearAccionAccess().getPuertoAssignment_4(), "rule__ForwardearAccion__PuertoAssignment_4");
					put(grammarAccess.getCondicionPuertoAccess().getPuertoAssignment_1(), "rule__CondicionPuerto__PuertoAssignment_1");
					put(grammarAccess.getCondicionIPAccess().getIpAssignment_1(), "rule__CondicionIP__IpAssignment_1");
					put(grammarAccess.getIPAccess().getPrimeroAssignment_0(), "rule__IP__PrimeroAssignment_0");
					put(grammarAccess.getIPAccess().getSegundoAssignment_2(), "rule__IP__SegundoAssignment_2");
					put(grammarAccess.getIPAccess().getTerceroAssignment_4(), "rule__IP__TerceroAssignment_4");
					put(grammarAccess.getIPAccess().getCuartoAssignment_6(), "rule__IP__CuartoAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.tadp.firewall.ui.contentassist.antlr.internal.InternalFirewalllParser typedParser = (edu.tadp.firewall.ui.contentassist.antlr.internal.InternalFirewalllParser) parser;
			typedParser.entryRuleFirewall();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FirewalllGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FirewalllGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
